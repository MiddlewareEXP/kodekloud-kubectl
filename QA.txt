			LAB-1
---------------------------------------------------------------------------------------------------
1) How many PODs exist on the system? In the current(default) namespace
=  kubectl get pods
2) How many ReplicaSets exist on the system? In the current(default) namespace
=  kubectl get rs
3) How many Deployments exist on the system? In the current(default) namespace
=  kubectl get deployments
4) How many Deployments exist on the system now? We just created a Deployment! Check again
=  kubectl get deployments
5) How many ReplicaSets exist on the system now?
=  kubectl get rs
6) How many PODs exist on the system now?
=  kubectl get pods
7) Out of all the existing PODs, how many are ready?
=  kubectl get pods
8) What is the image used to create the pods in the new deployment?
=  kubectl get pods
   kubectl describe pod <POD name>
9) Why do you think the deployment is not ready?
=  image or others thins doesn't exist.
10) Create a new Deployment using the deployment-definition-1.yml file located at /root/ . There is an issue with the file, so try to fix it.
=  pwd
   ls
   kubectl create -f deplyment-definition-1.yaml
   vi deplyment-definition-1.yaml

	wrong
	-----
        apiVersion: apps/v1
        kind: deployment
        metadata:
          name: deployment-1
        spec:
          replicas: 2
          selector:
            metchLabels:
              name: busybox-pod
          template:
            metadata:
              labels:
                name: busybox-pod
            spec:
              containers:
              - name: busybox-container
                image: busybox888
                command:
                - sh
                - "-c"
                - echo Hello Kubernetes! && sleep 3600

	right
	-----
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: deployment-1
        spec:
          replicas: 2
          selector:
            metchLabels:
              name: busybox-pod
          template:
            metadata:
              labels:
                name: busybox-pod
            spec:
              containers:
              - name: busybox-container
                image: busybox888
                command:
                - sh
                - "-c"
                - echo Hello Kubernetes! && sleep 3600


    kubectl create -f deplyment-definition-1.yaml

11) Create a new Deployment with the below attributes using your own deployment definition file.
Name: httpd-frontend;
Replicas: 3;
Image: httpd: 2.4-alpine
=  kubectl create deployment --help
   kubectl create deployment httpd-frontend --image=httpd:2.4-alpine --replicas=3
   kubectl get deploy


			LAB-2
---------------------------------------------------------------------------------------------------
1) How many PODs exist on the system? In the current(default) namespace
=  kubectl get pods
2) Create a new pod with the nginx image.
=  kubectl run --help
   kubectl run nginx --image=nginx
3) How many pods are created now?
   Note: We have created a few more pods. So please check again
=  kubectl get pods
4) what is the images used to create the new pods? You must look at one of the new pods
   in detail to figure this out
=  kubectl describe pod newpods-listtt
   busybox
5) Which nodes are these pods placed on? You must look at all the pods in details to figure this out.
=  kubectl get pods -o wide
6) How many contianers are part of the pod webapp?
   Note: We just created a new POD. Ignore the state of the POD for now.
=  kubectl get pods
   kubectl describe pod webapp
7) What images are used in the new webapp pod? You must look at all the pods in detail to figure
   this out.
=  kubectl describe pod webapp (nginx & agentx)
8) What is the state of the container agentx in the pod webapp?
=  kubectl describe pod webapp
9) Why do you think the container agentx in pod webapp is error?
=  kubectl describe pod webapp 
10) What does the READY column in the output of the `kubectl get pods` command indicate?
=  kubectl get pods (running container in the pod/total container in the pod, 1/2)
11) Delete the webapp Pod. Once deleted, wait for the pod to fully terminated.
=  kubectl delete pod webapp
12) Create a new pod with the name redis and with the image redis123.
    Use a pod-definition YAML file. And yes the image name is wrong!
=  kubectl run redis --image=redis123 --dry-run -o yaml (deprecated)
   kubectl run redis --image=redis123 --dry-run=client -o yaml
   kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml
   cat redis.yaml
   kubectl create -f redis.yaml
   kubectl get pods
13) Now change the image on this pod to redis. Oncle done,the pod should be in a running state.
=  cat redis.yaml

     apiVersion: v1
     kind: Pod
     metadata:
       creationTimestamp: null
       labels:
         run: redis
       name: redis
     spec:
       containers:
       - image: redis123
         name: redis
         resources: {}
       dnsPolicy: ClusterFirst
       restartPolicy: Always
     status: {}

   
   vi redis.yaml

    apiVersion: v1
     kind: Pod
     metadata:
       creationTimestamp: null
       labels:
         run: redis
       name: redis
     spec:
       containers:
       - image: redis
         name: redis
         resources: {}
       dnsPolicy: ClusterFirst
       restartPolicy: Always
     status: {}


   kubectl apply -f redis.yaml
   kubectl get pods


























   